8-1-4

Aus Zusatzmaterial:

void init_tim5() {
    // Signal zur Frequenzmessung wird an die Portleitung
    // PA01 TIM5CH2 angeschlossen   
         
    // Taktsystem f체r die Port A Freigeben
    RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
    // Struktur anlegen
    GPIO_InitTypeDef GPIO_InitStructure;
    // Struktur Initialisieren
    GPIO_StructInit(&GPIO_InitStructure);
    // Portleitung in der Struktur Konfigurieren
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_100MHz;
    GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_NOPULL;
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_1;
    // Werte aus der Struktur in die Register schreiben
    GPIO_Init(GPIOA, &GPIO_InitStructure);
     
     
    // Taktsystem f체r TIM5 Freigeben
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM5, ENABLE);
    // Alternativfunktion der Portleitung Freigeben
    GPIO_PinAFConfig(GPIOA, GPIO_PinSource1, GPIO_AF_TIM5);
    //Struktur anlegen
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;
    // Timer in der Struktur konfigurieren
    TIM_TimeBaseStructure.TIM_Prescaler = 840 - 1;
    TIM_TimeBaseStructure.TIM_Period = 0xFFFF -1;
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;
    // TIM5 Register aus dem Strukt Schreiben
    TIM_TimeBaseInit(TIM5, &TIM_TimeBaseStructure);
    // dadurch z채hlt der Counter in 0,00001sek Schritten hoch
     
     
    // TIM5CH2 Erkennen steigender Flanke an TI2
    TIM5->CCMR1 |= TIM_CCMR1_CC2S_0;
    // Input Filter setzen
    TIM5->CCMR1 |= TIM_CCMR1_IC2F_2 + TIM_CCMR1_IC2F_1 + TIM_CCMR1_IC2F_0;
    // Trigger auf Steigende Flanke setzen
    TIM5->CCER   |= TIM_CCER_CC2P;
    // Prescaler auf Null setzen
    TIM5->CCMR1   &= ~(TIM_CCMR1_IC2PSC_1 + TIM_CCMR1_IC2PSC_0);
    // Capture freigeben
    TIM5->CCER   |= TIM_CCER_CC2E;
    // Enable Interrupt
    TIM5->DIER   |= TIM_DIER_CC2IE;
     
     
    // Konfiguration der Interruptcontrollers
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM5_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);
}




in main.c:

void start_messung() {
    // Counter auf 0 setzen
    TIM_SetCounter (TIM5, 0x00);
    // Timer TIM5 Freigeben
    TIM_Cmd(TIM5, ENABLE);
    // Messung l채uft jetzt
}


//....
for(int i=0; i<10; i++) {
    green_LED_OFF;
    delay = get_random (Siehe Zusatzmaterial ganz unten)
    
    usart_2_print("\r\ns");
    
    start_messung();
    wait_msek(delay);

    green_LED_ON;

    // Warte auf messung fertig
    while(messungs_counter<=i) {}    
}

int sum = 0;
int min = 99999999;
int max = 0;
for(int i=0; i<10; i++) {
    sum += messungen[i];
    if(messungen[i]<min) min = messungen[i];
    if(messungen[i]>max) max = messungen[i];
}

char data[50] = {0};
sprintf(data, "\r\nMin: %d", min);
usart_2_print(data)
sprintf(data, "\r\nMax: %d", max);
usart_2_print(data)
sprintf(data, "\r\nAvg: %d", sum/10);
usart_2_print(data)

while(1) {}







in interrupts.c

int messungen[10] = {0};
int messungs_counter = 0;
void TIM5_IRQHandler(void) {
    if(TIM_GetITStatus(TIM5, TIM_IT_CC2) == SET) {
        int counter = TIM5->CNT5;

        //Timer ausschalten
        TIM_Cmd(TIM5, DISABLE);

        messungen[messungs_counter++] = counter;
    }
}
