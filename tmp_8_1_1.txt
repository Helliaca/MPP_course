8-1-1

Für Aufgaben 8-1-1 und 8-1-2 verwenden wir basic timers TIM6 und TIM7 weil wir nur interruptfähigkeit brauchen und sonst nichts. (Siehe Reference manual)

// Aus Zusatzmaterial:
init_tim7_iqr() {
    // Konfiguration der Interruptcontrollers
    NVIC_InitTypeDef NVIC_InitStructure;
    NVIC_InitStructure.NVIC_IRQChannel = TIM7_IRQn;
    NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 0;
    NVIC_InitStructure.NVIC_IRQChannelSubPriority = 1;
    NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
    NVIC_Init(&NVIC_InitStructure);

    // Taktsystem für TIM7 Freigeben
    RCC_APB1PeriphClockCmd(RCC_APB1Periph_TIM7, ENABLE);

    // Struktur anlegen
    TIM_TimeBaseInitTypeDef TIM_TimeBaseStructure;

    // TIM7 in der Struktur konfigurieren
    TIM_TimeBaseStructure.TIM_Prescaler = 8400 - 1; // 100µs = 8400 * 1/84000000Hz 
    TIM_TimeBaseStructure.TIM_Period = 10000 - 1;   // 1s = 10000 * 100µs
    TIM_TimeBaseStructure.TIM_ClockDivision = 0;
    TIM_TimeBaseStructure.TIM_CounterMode = TIM_CounterMode_Up;

    // TIM7 Register aus der Struktur Schreiben
    TIM_TimeBaseInit(TIM7, &TIM_TimeBaseStructure);

    // TIM7 Interrupt erlauben
    TIM_ITConfig(TIM7, TIM_IT_Update, ENABLE);

    // TIM 7 Freigeben (Takt auf Counter schalten)
    TIM_Cmd(TIM7, ENABLE);

    // ab jetzt wird jede Sekunde ein Interrupt ausgelöst 
    // der die ISR d.h. den TIM7_IRQHandler aufruft.
}


// In interrupts.c:
int tim7_counter = 0;
...
void TIM7_IRQHandler(void){
    if (TIM_GetITStatus(TIM7, TIM_IT_Update) != RESET) {
        TIM_ClearITPendingBit(TIM7, TIM_IT_Update);
        
        tim7_counter++;
        
        char data[50] = {0};
        sprintf(data, "\r\nTIM7 COUNTER: %d", tim7_counter);
        usart_2_print(data)
    }
}
...
