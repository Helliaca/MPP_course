RTC_TimeTypeDef  RTC_Time_Aktuell;      //  Zeit
RTC_DateTypeDef  RTC_Date_Aktuell;      //  Datum

char usart2_rx_buffer[PUFFER_SIZE];
char usart2_tx_buffer[PUFFER_SIZE];
int str_len = 0;
timer = 100;

while (1) {
  // Timer soll durch SysTicks jede 10ms runtergezählt werden. Siehe Aufgabe 2
	while(timer > 0 || USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET) {}

  if (USART_GetFlagStatus(USART2, USART_FLAG_RXNE) == RESET) {
    char zeichen = (char) USART_ReceiveData(USART2);
    if(zeichen==0x0D) { //Zeichenkette zuende
      usart2_rx_buffer[str_len] = 0x00; //Nullterminator hinzufügen und verarbeiten
      process(usart2_rx_buffer);
      str_len = 0;
    }
    else {
      usart2_rx_buffer[str_len] = zeichen;
			str_len++;
    }
  }

  if(timer<=0) {
    timer = 100;
    RTC_GetDate(RTC_Format_BIN, &RTC_Date_Aktuell);
    RTC_GetTime(RTC_Format_BIN, &RTC_Time_Aktuell);
    
    sprintf(usart2_tx_buffer,
      "\r\nDATE: %.2d-%.2d-%.2d-%.2d",
      RTC_Date_Aktuell.RTC_Year,
      RTC_Date_Aktuell.RTC_Month,
      RTC_Date_Aktuell.RTC_Date,
      RTC_Date_Aktuell.RTC_WeekDay
    );
    uart_send(usart2_tx_buffer);

    
    sprintf(usart2_tx_buffer,
      "\r\nTIME: %.2d:%.2d:%.2d:%.2d",
      RTC_Time_Aktuell.RTC_Hours, 
      RTC_Time_Aktuell.RTC_Minutes, 
      RTC_Time_Aktuell.RTC_Seconds, 
      RTC_Time_Aktuell.RTC_H12
    );
    uart_send(usart2_tx_buffer); 
  }
}

void process(char* data) {
  RTC_TimeTypeDef  RTC_Time_Aktuell;
  int success = sscanf(data,
    "set-time %.2d:%.2d:%.2d:%.2d",
    &RTC_Time_Aktuell.RTC_Hours, 
    &RTC_Time_Aktuell.RTC_Minutes, 
    &RTC_Time_Aktuell.RTC_Seconds, 
    &RTC_Time_Aktuell.RTC_H12
  );

  if (success == 1) {
      RTC_SetTime(RTC_Format_BCD, &RTC_Time_Aktuell);
  }
  //TODO: Analog mit Date
}
